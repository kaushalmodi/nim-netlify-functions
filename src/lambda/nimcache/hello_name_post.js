/* Generated by the Nim Compiler v0.19.1 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};

function cstrToNimstr(c_16841) {
		  var ln = c_16841.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16841.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16841.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function eqStrings(a_17053, b_17054) {
		    if (a_17053 == b_17054) return true;
    if (a_17053 === null && b_17054.length == 0) return true;
    if (b_17054 === null && a_17053.length == 0) return true;
    if ((!a_17053) || (!b_17054)) return false;
    var alen = a_17053.length;
    if (alen != b_17054.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17053[i] != b_17054[i]) return false;
    return true;
  

	
}

function makeNimstrLit(c_16824) {
		  var ln = c_16824.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16824.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17830, src_17831, ti_17832) {
	var result_18243 = null;

		switch (ti_17832.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17801(ti_17832))) {
			result_18243 = src_17831;
			}
			else {
				result_18243 = [src_17831[0], src_17831[1]];
			}
			
			break;
		case 19:
			      if (dest_17830 === null || dest_17830 === undefined) {
        dest_17830 = {};
      }
      else {
        for (var key in dest_17830) { delete dest_17830[key]; }
      }
      for (var key in src_17831) { dest_17830[key] = src_17831[key]; }
      result_18243 = dest_17830;
    
			break;
		case 18:
		case 17:
			if (!((ti_17832.base == null))) {
			result_18243 = nimCopy(dest_17830, src_17831, ti_17832.base);
			}
			else {
			if ((ti_17832.kind == 17)) {
			result_18243 = (dest_17830 === null || dest_17830 === undefined) ? {m_type: ti_17832} : dest_17830;
			}
			else {
				result_18243 = (dest_17830 === null || dest_17830 === undefined) ? {} : dest_17830;
			}
			}
			nimCopyAux(result_18243, src_17831, ti_17832.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17831 === null) {
        result_18243 = null;
      }
      else {
        if (dest_17830 === null || dest_17830 === undefined) {
          dest_17830 = new Array(src_17831.length);
        }
        else {
          dest_17830.length = src_17831.length;
        }
        result_18243 = dest_17830;
        for (var i = 0; i < src_17831.length; ++i) {
          result_18243[i] = nimCopy(result_18243[i], src_17831[i], ti_17832.base);
        }
      }
    
			break;
		case 28:
			      if (src_17831 !== null) {
        result_18243 = src_17831.slice(0);
      }
    
			break;
		default: 
			result_18243 = src_17831;
			break;
		}

	return result_18243;

}

function toJSStr(s_16858) {
		  if (s_16858 === null) return "";
  var len = s_16858.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16858[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16858[i] < 128)
      asciiPart[i] = fcc(s_16858[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}
var nimvm_7778 = false;
process.exitCode = 0;
var global_raise_hook_14018 = [null];
var local_raise_hook_14023 = [null];
var out_of_mem_hook_14026 = [null];
var object_id_141245 = [0];

function is_fat_pointer_17801(ti_17803) {
	var result_17804 = false;

	BeforeRet: do {
		result_17804 = !((ConstSet1[ti_17803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17804;

}

function nimCopyAux(dest_17835, src_17836, n_17838) {
		switch (n_17838.kind) {
		case 0:
			break;
		case 1:
			      dest_17835[n_17838.offset] = nimCopy(dest_17835[n_17838.offset], src_17836[n_17838.offset], n_17838.typ);
    
			break;
		case 2:
			L1: do {
				var i_18224 = 0;
				var colontmp__158884 = 0;
				colontmp__158884 = (n_17838.len - 1);
				var res_158886 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_158886 <= colontmp__158884)) break L3;
							i_18224 = res_158886;
							nimCopyAux(dest_17835, src_17836, n_17838.sons[i_18224]);
							res_158886 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17835[n_17838.offset] = nimCopy(dest_17835[n_17838.offset], src_17836[n_17838.offset], n_17838.typ);
      for (var i = 0; i < n_17838.sons.length; ++i) {
        nimCopyAux(dest_17835, src_17836, n_17838.sons[i][1]);
      }
    
			break;
		}

	
}
async function HEX3Aanonymous_158060(event_158062, context_158063) {

		function inner_158131() {
			var result_158133 = null;

			var F={procname:":anonymous.inner",prev:framePtr,filename:"../../../../../stow/pkgs/nim/devel/lib/js/jsffi.nim",line:0};
			framePtr = F;
			BeforeRet: do {
				F.line = 423;
				var a_158134 = null;
				F.line = 424;
				a_158134 = {};
				F.line = 434;
				a_158134.statusCode = 405;
				F.line = 434;
				a_158134.body = makeNimstrLit("Method Not Allowed");
				F.line = 443;
				result_158133 = a_158134;
				break BeforeRet;
			} while (false);
			framePtr = F.prev;

			return result_158133;

		}

		function inner_158487() {
			var result_158489 = null;

			var F={procname:":anonymous.inner",prev:framePtr,filename:"../../../../../stow/pkgs/nim/devel/lib/js/jsffi.nim",line:0};
			framePtr = F;
			BeforeRet: do {
				F.line = 423;
				var a_158490 = null;
				F.line = 424;
				a_158490 = {};
				F.line = 434;
				a_158490.statusCode = 200;
				F.line = 434;
				a_158490.body = toJSStr((makeNimstrLit("Hello, ")).concat(name_158478,makeNimstrLit("! From Nim.")));
				F.line = 443;
				result_158489 = a_158490;
				break BeforeRet;
			} while (false);
			framePtr = F.prev;

			return result_158489;

		}

	var result_158074 = null;

	var F={procname:"hello_name_post.:anonymous",prev:framePtr,filename:"hello_name_post.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 15;
		var http_method_158107 = cstrToNimstr((event_158062.httpMethod));
		if (!(eqStrings(http_method_158107, makeNimstrLit("POST")))) {
		F.line = 17;
		result_158074 = inner_158131();
		break BeforeRet;
		}
		
		F.line = 23;
		var params_158463 = querystring.parse((event_158062.body));
		F.line = 25;
		var name_158478 = cstrToNimstr((params_158463.name));
		if (eqStrings(name_158478, [])) {
		F.line = 27;
		name_158478 = nimCopy(null, makeNimstrLit("World"), NTI138);
		}
		
		F.line = 29;
		result_158074 = inner_158487();
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_158074;

}
import "querystring" from "querystring";
exports.handler = HEX3Aanonymous_158060;
