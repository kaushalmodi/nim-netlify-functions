/* Generated by the Nim Compiler v0.19.1 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;

function cstrToNimstr(c_321641) {
		  var ln = c_321641.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_321641.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_321641.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_321658) {
		  if (s_321658 === null) return "";
  var len = s_321658.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_321658[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_321658[i] < 128)
      asciiPart[i] = fcc(s_321658[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}
var nimvm_312578 = false;
var nim_program_result = 0;
var global_raise_hook_318818 = [null];
var local_raise_hook_318823 = [null];
var out_of_mem_hook_318826 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_446245 = [0];
async function HEX3Aanonymous_463085(event_463087, context_463088) {

		function inner_463152() {
			var result_463154 = null;

			var F={procname:":anonymous.inner",prev:framePtr,filename:"../../../../../stow/pkgs/nim/devel/lib/js/jsffi.nim",line:0};
			framePtr = F;
			BeforeRet: do {
				F.line = 423;
				var a_463155 = null;
				F.line = 424;
				a_463155 = {};
				F.line = 434;
				a_463155.statusCode = 200;
				F.line = 434;
				a_463155.body = toJSStr(greeting_str_463044);
				F.line = 443;
				result_463154 = a_463155;
				break BeforeRet;
			} while (false);
			framePtr = F.prev;

			return result_463154;

		}

	var result_463099 = null;

	var F={procname:"hello_env.:anonymous",prev:framePtr,filename:"hello_env.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		console.log((greeting_463034));
		F.line = 30;
		result_463099 = inner_463152();
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_463099;

}
var greeting_463034 = process.env.GREETING;
var greeting_str_463044 = cstrToNimstr((greeting_463034));
exports.handler = HEX3Aanonymous_463085;
